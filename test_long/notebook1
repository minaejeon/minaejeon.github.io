---
sort: 1
---

# Ensemble, Boosting Model 실험 / San Francisco Crime Classification


> information of competition and data information
>
> 
>



```
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

```

/kaggle/input/sf-crime/train.csv.zip
/kaggle/input/sf-crime/sampleSubmission.csv.zip
/kaggle/input/sf-crime/test.csv.zip

```
train=pd.read_csv("/kaggle/input/sf-crime/train.csv.zip")
test=pd.read_csv("/kaggle/input/sf-crime/test.csv.zip")
pd.options.display.max_columns=99
display(train,test)

```
{![image](https://user-images.githubusercontent.com/69743938/170150325-eacaaacc-2fd6-4a05-b471-d12fd4d0c5e8.png)}

{![image](https://user-images.githubusercontent.com/69743938/170150486-c185f8fe-1df0-412f-9471-5308afd8b102.png)}

> train,test 각 데이터에서 겹치지 않는 값과 정답 값을 drop하여 정제합니다

```
alldata=pd.concat([train,test],axis=0)
alldata2=alldata.drop(columns=["Category","Descript","Resolution","Dates"])
alldata2

```
{![image](https://user-images.githubusercontent.com/69743938/170150651-72c4b0eb-841c-4289-86f1-d9f837a41dad.png)}

> 날짜를 숫자로 변경하여 러닝에 용이합니다


```
alldata2["DayOfWeek"].unique()
alldata2["DayOfWeek"]=alldata2["DayOfWeek"].replace({"Wednesday":0, "Tuesday":1, "Monday":2, "Sunday":3, "Saturday":4, "Friday":5, "Thursday":6})
alldata2["DayOfWeek"]

```
{![image](https://user-images.githubusercontent.com/69743938/170150773-87b7b1fe-b1f8-4941-acfe-8f93bd6cc72d.png)}

> LabelEncoder를 이용하면 해당 칼럼의 값을 임의의 숫자로 지정해줍니다

```
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
alldata2["PdDistrict"]=le.fit_transform(alldata2["PdDistrict"])
alldata2
```
{![image](https://user-images.githubusercontent.com/69743938/170150884-dd2c405b-e731-4926-8cb2-db78da070782.png)}

> PdDistrict의 각 칼럼 고유값에 해당하는 숫자 값을 dictionary로 만들어 줍니다

```
len(le.classes_) #10개
dict(zip(le.classes_,range(10)))
```

{![image](https://user-images.githubusercontent.com/69743938/170150977-c7c662de-f53b-4530-8ce8-3f75a63d2479.png)}

> 칼럼 값이 object인 것이 있는지 추가로 확인합니다.

```
category=alldata2.columns[alldata2.dtypes == object]
category
```

{![image](https://user-images.githubusercontent.com/69743938/170151093-91c65e90-a886-425a-843b-ff9151e68477.png)}
---

my realization

---

```tip
principle
```
